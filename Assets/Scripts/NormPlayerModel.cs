using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class NormPlayerModel
{
    [RealtimeProperty(1, false, true)]
    private int _team;

    [RealtimeProperty(2, false, true)]
    private int _side;

    [RealtimeProperty(3, false, true)]
    private float _health;

    [RealtimeProperty(4, true, true)]
    private int _collisionCount;

    [RealtimeProperty(5, false, true)]
    private bool _isInsideGame;

    [RealtimeProperty(6, false, true)]
    private float _scale;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class NormPlayerModel : RealtimeModel {
    public int team {
        get {
            return _teamProperty.value;
        }
        set {
            if (_teamProperty.value == value) return;
            _teamProperty.value = value;
            InvalidateUnreliableLength();
            FireTeamDidChange(value);
        }
    }
    
    public int side {
        get {
            return _sideProperty.value;
        }
        set {
            if (_sideProperty.value == value) return;
            _sideProperty.value = value;
            InvalidateUnreliableLength();
            FireSideDidChange(value);
        }
    }
    
    public float health {
        get {
            return _healthProperty.value;
        }
        set {
            if (_healthProperty.value == value) return;
            _healthProperty.value = value;
            InvalidateUnreliableLength();
            FireHealthDidChange(value);
        }
    }
    
    public bool isInsideGame {
        get {
            return _isInsideGameProperty.value;
        }
        set {
            if (_isInsideGameProperty.value == value) return;
            _isInsideGameProperty.value = value;
            InvalidateUnreliableLength();
            FireIsInsideGameDidChange(value);
        }
    }
    
    public float scale {
        get {
            return _scaleProperty.value;
        }
        set {
            if (_scaleProperty.value == value) return;
            _scaleProperty.value = value;
            InvalidateUnreliableLength();
            FireScaleDidChange(value);
        }
    }
    
    public int collisionCount {
        get {
            return _collisionCountProperty.value;
        }
        set {
            if (_collisionCountProperty.value == value) return;
            _collisionCountProperty.value = value;
            InvalidateReliableLength();
            FireCollisionCountDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(NormPlayerModel model, T value);
    public event PropertyChangedHandler<int> teamDidChange;
    public event PropertyChangedHandler<int> sideDidChange;
    public event PropertyChangedHandler<float> healthDidChange;
    public event PropertyChangedHandler<int> collisionCountDidChange;
    public event PropertyChangedHandler<bool> isInsideGameDidChange;
    public event PropertyChangedHandler<float> scaleDidChange;
    
    public enum PropertyID : uint {
        Team = 1,
        Side = 2,
        Health = 3,
        CollisionCount = 4,
        IsInsideGame = 5,
        Scale = 6,
    }
    
    #region Properties
    
    private UnreliableProperty<int> _teamProperty;
    
    private UnreliableProperty<int> _sideProperty;
    
    private UnreliableProperty<float> _healthProperty;
    
    private ReliableProperty<int> _collisionCountProperty;
    
    private UnreliableProperty<bool> _isInsideGameProperty;
    
    private UnreliableProperty<float> _scaleProperty;
    
    #endregion
    
    public NormPlayerModel() : base(null) {
        _teamProperty = new UnreliableProperty<int>(1, _team);
        _sideProperty = new UnreliableProperty<int>(2, _side);
        _healthProperty = new UnreliableProperty<float>(3, _health);
        _collisionCountProperty = new ReliableProperty<int>(4, _collisionCount);
        _isInsideGameProperty = new UnreliableProperty<bool>(5, _isInsideGame);
        _scaleProperty = new UnreliableProperty<float>(6, _scale);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _collisionCountProperty.UnsubscribeCallback();
    }
    
    private void FireTeamDidChange(int value) {
        try {
            teamDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSideDidChange(int value) {
        try {
            sideDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHealthDidChange(float value) {
        try {
            healthDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCollisionCountDidChange(int value) {
        try {
            collisionCountDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsInsideGameDidChange(bool value) {
        try {
            isInsideGameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireScaleDidChange(float value) {
        try {
            scaleDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _teamProperty.WriteLength(context);
        length += _sideProperty.WriteLength(context);
        length += _healthProperty.WriteLength(context);
        length += _collisionCountProperty.WriteLength(context);
        length += _isInsideGameProperty.WriteLength(context);
        length += _scaleProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _teamProperty.Write(stream, context);
        writes |= _sideProperty.Write(stream, context);
        writes |= _healthProperty.Write(stream, context);
        writes |= _collisionCountProperty.Write(stream, context);
        writes |= _isInsideGameProperty.Write(stream, context);
        writes |= _scaleProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Team: {
                    changed = _teamProperty.Read(stream, context);
                    if (changed) FireTeamDidChange(team);
                    break;
                }
                case (uint) PropertyID.Side: {
                    changed = _sideProperty.Read(stream, context);
                    if (changed) FireSideDidChange(side);
                    break;
                }
                case (uint) PropertyID.Health: {
                    changed = _healthProperty.Read(stream, context);
                    if (changed) FireHealthDidChange(health);
                    break;
                }
                case (uint) PropertyID.CollisionCount: {
                    changed = _collisionCountProperty.Read(stream, context);
                    if (changed) FireCollisionCountDidChange(collisionCount);
                    break;
                }
                case (uint) PropertyID.IsInsideGame: {
                    changed = _isInsideGameProperty.Read(stream, context);
                    if (changed) FireIsInsideGameDidChange(isInsideGame);
                    break;
                }
                case (uint) PropertyID.Scale: {
                    changed = _scaleProperty.Read(stream, context);
                    if (changed) FireScaleDidChange(scale);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _team = team;
        _side = side;
        _health = health;
        _collisionCount = collisionCount;
        _isInsideGame = isInsideGame;
        _scale = scale;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
