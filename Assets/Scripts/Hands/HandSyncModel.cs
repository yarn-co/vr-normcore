using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HandSyncModel
{
    [RealtimeProperty(1, true, true)]
    private float _indexValue;

    [RealtimeProperty(2, true, true)]
    private float _gripValue;

    [RealtimeProperty(3, true, true)]
    private bool _primaryTouch;

    [RealtimeProperty(4, true, true)]
    private bool _secondaryTouch;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandSyncModel : RealtimeModel {
    public float indexValue {
        get {
            return _indexValueProperty.value;
        }
        set {
            if (_indexValueProperty.value == value) return;
            _indexValueProperty.value = value;
            InvalidateReliableLength();
            FireIndexValueDidChange(value);
        }
    }
    
    public float gripValue {
        get {
            return _gripValueProperty.value;
        }
        set {
            if (_gripValueProperty.value == value) return;
            _gripValueProperty.value = value;
            InvalidateReliableLength();
            FireGripValueDidChange(value);
        }
    }
    
    public bool primaryTouch {
        get {
            return _primaryTouchProperty.value;
        }
        set {
            if (_primaryTouchProperty.value == value) return;
            _primaryTouchProperty.value = value;
            InvalidateReliableLength();
            FirePrimaryTouchDidChange(value);
        }
    }
    
    public bool secondaryTouch {
        get {
            return _secondaryTouchProperty.value;
        }
        set {
            if (_secondaryTouchProperty.value == value) return;
            _secondaryTouchProperty.value = value;
            InvalidateReliableLength();
            FireSecondaryTouchDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(HandSyncModel model, T value);
    public event PropertyChangedHandler<float> indexValueDidChange;
    public event PropertyChangedHandler<float> gripValueDidChange;
    public event PropertyChangedHandler<bool> primaryTouchDidChange;
    public event PropertyChangedHandler<bool> secondaryTouchDidChange;
    
    public enum PropertyID : uint {
        IndexValue = 1,
        GripValue = 2,
        PrimaryTouch = 3,
        SecondaryTouch = 4,
    }
    
    #region Properties
    
    private ReliableProperty<float> _indexValueProperty;
    
    private ReliableProperty<float> _gripValueProperty;
    
    private ReliableProperty<bool> _primaryTouchProperty;
    
    private ReliableProperty<bool> _secondaryTouchProperty;
    
    #endregion
    
    public HandSyncModel() : base(null) {
        _indexValueProperty = new ReliableProperty<float>(1, _indexValue);
        _gripValueProperty = new ReliableProperty<float>(2, _gripValue);
        _primaryTouchProperty = new ReliableProperty<bool>(3, _primaryTouch);
        _secondaryTouchProperty = new ReliableProperty<bool>(4, _secondaryTouch);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _indexValueProperty.UnsubscribeCallback();
        _gripValueProperty.UnsubscribeCallback();
        _primaryTouchProperty.UnsubscribeCallback();
        _secondaryTouchProperty.UnsubscribeCallback();
    }
    
    private void FireIndexValueDidChange(float value) {
        try {
            indexValueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGripValueDidChange(float value) {
        try {
            gripValueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePrimaryTouchDidChange(bool value) {
        try {
            primaryTouchDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSecondaryTouchDidChange(bool value) {
        try {
            secondaryTouchDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _indexValueProperty.WriteLength(context);
        length += _gripValueProperty.WriteLength(context);
        length += _primaryTouchProperty.WriteLength(context);
        length += _secondaryTouchProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _indexValueProperty.Write(stream, context);
        writes |= _gripValueProperty.Write(stream, context);
        writes |= _primaryTouchProperty.Write(stream, context);
        writes |= _secondaryTouchProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IndexValue: {
                    changed = _indexValueProperty.Read(stream, context);
                    if (changed) FireIndexValueDidChange(indexValue);
                    break;
                }
                case (uint) PropertyID.GripValue: {
                    changed = _gripValueProperty.Read(stream, context);
                    if (changed) FireGripValueDidChange(gripValue);
                    break;
                }
                case (uint) PropertyID.PrimaryTouch: {
                    changed = _primaryTouchProperty.Read(stream, context);
                    if (changed) FirePrimaryTouchDidChange(primaryTouch);
                    break;
                }
                case (uint) PropertyID.SecondaryTouch: {
                    changed = _secondaryTouchProperty.Read(stream, context);
                    if (changed) FireSecondaryTouchDidChange(secondaryTouch);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _indexValue = indexValue;
        _gripValue = gripValue;
        _primaryTouch = primaryTouch;
        _secondaryTouch = secondaryTouch;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
